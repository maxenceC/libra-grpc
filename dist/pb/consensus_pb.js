/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ledger_info_pb = require('./ledger_info_pb.js');
goog.object.extend(proto, ledger_info_pb);
var transaction_pb = require('./transaction_pb.js');
goog.object.extend(proto, transaction_pb);
goog.exportSymbol('proto.network.Block', null, global);
goog.exportSymbol('proto.network.BlockRetrievalStatus', null, global);
goog.exportSymbol('proto.network.ConsensusMsg', null, global);
goog.exportSymbol('proto.network.PacemakerTimeout', null, global);
goog.exportSymbol('proto.network.PacemakerTimeoutCertificate', null, global);
goog.exportSymbol('proto.network.Proposal', null, global);
goog.exportSymbol('proto.network.QuorumCert', null, global);
goog.exportSymbol('proto.network.RequestBlock', null, global);
goog.exportSymbol('proto.network.RespondBlock', null, global);
goog.exportSymbol('proto.network.SyncInfo', null, global);
goog.exportSymbol('proto.network.TimeoutMsg', null, global);
goog.exportSymbol('proto.network.Vote', null, global);
goog.exportSymbol('proto.network.VoteData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.ConsensusMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.network.ConsensusMsg.oneofGroups_);
};
goog.inherits(proto.network.ConsensusMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.ConsensusMsg.displayName = 'proto.network.ConsensusMsg';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.network.ConsensusMsg.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.network.ConsensusMsg.MessageCase = {
  MESSAGE_NOT_SET: 0,
  PROPOSAL: 1,
  VOTE: 2,
  REQUEST_BLOCK: 3,
  RESPOND_BLOCK: 4,
  TIMEOUT_MSG: 5,
  SYNC_INFO: 6
};

/**
 * @return {proto.network.ConsensusMsg.MessageCase}
 */
proto.network.ConsensusMsg.prototype.getMessageCase = function() {
  return /** @type {proto.network.ConsensusMsg.MessageCase} */(jspb.Message.computeOneofCase(this, proto.network.ConsensusMsg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.ConsensusMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.network.ConsensusMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.ConsensusMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.ConsensusMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposal: (f = msg.getProposal()) && proto.network.Proposal.toObject(includeInstance, f),
    vote: (f = msg.getVote()) && proto.network.Vote.toObject(includeInstance, f),
    requestBlock: (f = msg.getRequestBlock()) && proto.network.RequestBlock.toObject(includeInstance, f),
    respondBlock: (f = msg.getRespondBlock()) && proto.network.RespondBlock.toObject(includeInstance, f),
    timeoutMsg: (f = msg.getTimeoutMsg()) && proto.network.TimeoutMsg.toObject(includeInstance, f),
    syncInfo: (f = msg.getSyncInfo()) && proto.network.SyncInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.ConsensusMsg}
 */
proto.network.ConsensusMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.ConsensusMsg;
  return proto.network.ConsensusMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.ConsensusMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.ConsensusMsg}
 */
proto.network.ConsensusMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.network.Proposal;
      reader.readMessage(value,proto.network.Proposal.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    case 2:
      var value = new proto.network.Vote;
      reader.readMessage(value,proto.network.Vote.deserializeBinaryFromReader);
      msg.setVote(value);
      break;
    case 3:
      var value = new proto.network.RequestBlock;
      reader.readMessage(value,proto.network.RequestBlock.deserializeBinaryFromReader);
      msg.setRequestBlock(value);
      break;
    case 4:
      var value = new proto.network.RespondBlock;
      reader.readMessage(value,proto.network.RespondBlock.deserializeBinaryFromReader);
      msg.setRespondBlock(value);
      break;
    case 5:
      var value = new proto.network.TimeoutMsg;
      reader.readMessage(value,proto.network.TimeoutMsg.deserializeBinaryFromReader);
      msg.setTimeoutMsg(value);
      break;
    case 6:
      var value = new proto.network.SyncInfo;
      reader.readMessage(value,proto.network.SyncInfo.deserializeBinaryFromReader);
      msg.setSyncInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.ConsensusMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.ConsensusMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.ConsensusMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.ConsensusMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.network.Proposal.serializeBinaryToWriter
    );
  }
  f = message.getVote();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.network.Vote.serializeBinaryToWriter
    );
  }
  f = message.getRequestBlock();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.network.RequestBlock.serializeBinaryToWriter
    );
  }
  f = message.getRespondBlock();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.network.RespondBlock.serializeBinaryToWriter
    );
  }
  f = message.getTimeoutMsg();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.network.TimeoutMsg.serializeBinaryToWriter
    );
  }
  f = message.getSyncInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.network.SyncInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Proposal proposal = 1;
 * @return {?proto.network.Proposal}
 */
proto.network.ConsensusMsg.prototype.getProposal = function() {
  return /** @type{?proto.network.Proposal} */ (
    jspb.Message.getWrapperField(this, proto.network.Proposal, 1));
};


/** @param {?proto.network.Proposal|undefined} value */
proto.network.ConsensusMsg.prototype.setProposal = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.network.ConsensusMsg.oneofGroups_[0], value);
};


proto.network.ConsensusMsg.prototype.clearProposal = function() {
  this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.ConsensusMsg.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vote vote = 2;
 * @return {?proto.network.Vote}
 */
proto.network.ConsensusMsg.prototype.getVote = function() {
  return /** @type{?proto.network.Vote} */ (
    jspb.Message.getWrapperField(this, proto.network.Vote, 2));
};


/** @param {?proto.network.Vote|undefined} value */
proto.network.ConsensusMsg.prototype.setVote = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.network.ConsensusMsg.oneofGroups_[0], value);
};


proto.network.ConsensusMsg.prototype.clearVote = function() {
  this.setVote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.ConsensusMsg.prototype.hasVote = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestBlock request_block = 3;
 * @return {?proto.network.RequestBlock}
 */
proto.network.ConsensusMsg.prototype.getRequestBlock = function() {
  return /** @type{?proto.network.RequestBlock} */ (
    jspb.Message.getWrapperField(this, proto.network.RequestBlock, 3));
};


/** @param {?proto.network.RequestBlock|undefined} value */
proto.network.ConsensusMsg.prototype.setRequestBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.network.ConsensusMsg.oneofGroups_[0], value);
};


proto.network.ConsensusMsg.prototype.clearRequestBlock = function() {
  this.setRequestBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.ConsensusMsg.prototype.hasRequestBlock = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RespondBlock respond_block = 4;
 * @return {?proto.network.RespondBlock}
 */
proto.network.ConsensusMsg.prototype.getRespondBlock = function() {
  return /** @type{?proto.network.RespondBlock} */ (
    jspb.Message.getWrapperField(this, proto.network.RespondBlock, 4));
};


/** @param {?proto.network.RespondBlock|undefined} value */
proto.network.ConsensusMsg.prototype.setRespondBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.network.ConsensusMsg.oneofGroups_[0], value);
};


proto.network.ConsensusMsg.prototype.clearRespondBlock = function() {
  this.setRespondBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.ConsensusMsg.prototype.hasRespondBlock = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TimeoutMsg timeout_msg = 5;
 * @return {?proto.network.TimeoutMsg}
 */
proto.network.ConsensusMsg.prototype.getTimeoutMsg = function() {
  return /** @type{?proto.network.TimeoutMsg} */ (
    jspb.Message.getWrapperField(this, proto.network.TimeoutMsg, 5));
};


/** @param {?proto.network.TimeoutMsg|undefined} value */
proto.network.ConsensusMsg.prototype.setTimeoutMsg = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.network.ConsensusMsg.oneofGroups_[0], value);
};


proto.network.ConsensusMsg.prototype.clearTimeoutMsg = function() {
  this.setTimeoutMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.ConsensusMsg.prototype.hasTimeoutMsg = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SyncInfo sync_info = 6;
 * @return {?proto.network.SyncInfo}
 */
proto.network.ConsensusMsg.prototype.getSyncInfo = function() {
  return /** @type{?proto.network.SyncInfo} */ (
    jspb.Message.getWrapperField(this, proto.network.SyncInfo, 6));
};


/** @param {?proto.network.SyncInfo|undefined} value */
proto.network.ConsensusMsg.prototype.setSyncInfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.network.ConsensusMsg.oneofGroups_[0], value);
};


proto.network.ConsensusMsg.prototype.clearSyncInfo = function() {
  this.setSyncInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.ConsensusMsg.prototype.hasSyncInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.Proposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.Proposal.displayName = 'proto.network.Proposal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.Proposal.prototype.toObject = function(opt_includeInstance) {
  return proto.network.Proposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.Proposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.Proposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposedBlock: (f = msg.getProposedBlock()) && proto.network.Block.toObject(includeInstance, f),
    syncInfo: (f = msg.getSyncInfo()) && proto.network.SyncInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.Proposal}
 */
proto.network.Proposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.Proposal;
  return proto.network.Proposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.Proposal}
 */
proto.network.Proposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.network.Block;
      reader.readMessage(value,proto.network.Block.deserializeBinaryFromReader);
      msg.setProposedBlock(value);
      break;
    case 2:
      var value = new proto.network.SyncInfo;
      reader.readMessage(value,proto.network.SyncInfo.deserializeBinaryFromReader);
      msg.setSyncInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.Proposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.Proposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposedBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.network.Block.serializeBinaryToWriter
    );
  }
  f = message.getSyncInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.network.SyncInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Block proposed_block = 1;
 * @return {?proto.network.Block}
 */
proto.network.Proposal.prototype.getProposedBlock = function() {
  return /** @type{?proto.network.Block} */ (
    jspb.Message.getWrapperField(this, proto.network.Block, 1));
};


/** @param {?proto.network.Block|undefined} value */
proto.network.Proposal.prototype.setProposedBlock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.network.Proposal.prototype.clearProposedBlock = function() {
  this.setProposedBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.Proposal.prototype.hasProposedBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SyncInfo sync_info = 2;
 * @return {?proto.network.SyncInfo}
 */
proto.network.Proposal.prototype.getSyncInfo = function() {
  return /** @type{?proto.network.SyncInfo} */ (
    jspb.Message.getWrapperField(this, proto.network.SyncInfo, 2));
};


/** @param {?proto.network.SyncInfo|undefined} value */
proto.network.Proposal.prototype.setSyncInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.network.Proposal.prototype.clearSyncInfo = function() {
  this.setSyncInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.Proposal.prototype.hasSyncInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.PacemakerTimeout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.PacemakerTimeout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.PacemakerTimeout.displayName = 'proto.network.PacemakerTimeout';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.PacemakerTimeout.prototype.toObject = function(opt_includeInstance) {
  return proto.network.PacemakerTimeout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.PacemakerTimeout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.PacemakerTimeout.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getFieldWithDefault(msg, 1, 0),
    author: msg.getAuthor_asB64(),
    signature: msg.getSignature_asB64(),
    vote: (f = msg.getVote()) && proto.network.Vote.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.PacemakerTimeout}
 */
proto.network.PacemakerTimeout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.PacemakerTimeout;
  return proto.network.PacemakerTimeout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.PacemakerTimeout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.PacemakerTimeout}
 */
proto.network.PacemakerTimeout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthor(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 4:
      var value = new proto.network.Vote;
      reader.readMessage(value,proto.network.Vote.deserializeBinaryFromReader);
      msg.setVote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.PacemakerTimeout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.PacemakerTimeout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.PacemakerTimeout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.PacemakerTimeout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAuthor_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getVote();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.network.Vote.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 round = 1;
 * @return {number}
 */
proto.network.PacemakerTimeout.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.network.PacemakerTimeout.prototype.setRound = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes author = 2;
 * @return {!(string|Uint8Array)}
 */
proto.network.PacemakerTimeout.prototype.getAuthor = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes author = 2;
 * This is a type-conversion wrapper around `getAuthor()`
 * @return {string}
 */
proto.network.PacemakerTimeout.prototype.getAuthor_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthor()));
};


/**
 * optional bytes author = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthor()`
 * @return {!Uint8Array}
 */
proto.network.PacemakerTimeout.prototype.getAuthor_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthor()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.PacemakerTimeout.prototype.setAuthor = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.network.PacemakerTimeout.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.network.PacemakerTimeout.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.network.PacemakerTimeout.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.PacemakerTimeout.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional Vote vote = 4;
 * @return {?proto.network.Vote}
 */
proto.network.PacemakerTimeout.prototype.getVote = function() {
  return /** @type{?proto.network.Vote} */ (
    jspb.Message.getWrapperField(this, proto.network.Vote, 4));
};


/** @param {?proto.network.Vote|undefined} value */
proto.network.PacemakerTimeout.prototype.setVote = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.network.PacemakerTimeout.prototype.clearVote = function() {
  this.setVote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.PacemakerTimeout.prototype.hasVote = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.TimeoutMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.TimeoutMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.TimeoutMsg.displayName = 'proto.network.TimeoutMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.TimeoutMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.network.TimeoutMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.TimeoutMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.TimeoutMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    syncInfo: (f = msg.getSyncInfo()) && proto.network.SyncInfo.toObject(includeInstance, f),
    pacemakerTimeout: (f = msg.getPacemakerTimeout()) && proto.network.PacemakerTimeout.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.TimeoutMsg}
 */
proto.network.TimeoutMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.TimeoutMsg;
  return proto.network.TimeoutMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.TimeoutMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.TimeoutMsg}
 */
proto.network.TimeoutMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.network.SyncInfo;
      reader.readMessage(value,proto.network.SyncInfo.deserializeBinaryFromReader);
      msg.setSyncInfo(value);
      break;
    case 2:
      var value = new proto.network.PacemakerTimeout;
      reader.readMessage(value,proto.network.PacemakerTimeout.deserializeBinaryFromReader);
      msg.setPacemakerTimeout(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.TimeoutMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.TimeoutMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.TimeoutMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.TimeoutMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSyncInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.network.SyncInfo.serializeBinaryToWriter
    );
  }
  f = message.getPacemakerTimeout();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.network.PacemakerTimeout.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional SyncInfo sync_info = 1;
 * @return {?proto.network.SyncInfo}
 */
proto.network.TimeoutMsg.prototype.getSyncInfo = function() {
  return /** @type{?proto.network.SyncInfo} */ (
    jspb.Message.getWrapperField(this, proto.network.SyncInfo, 1));
};


/** @param {?proto.network.SyncInfo|undefined} value */
proto.network.TimeoutMsg.prototype.setSyncInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.network.TimeoutMsg.prototype.clearSyncInfo = function() {
  this.setSyncInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.TimeoutMsg.prototype.hasSyncInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PacemakerTimeout pacemaker_timeout = 2;
 * @return {?proto.network.PacemakerTimeout}
 */
proto.network.TimeoutMsg.prototype.getPacemakerTimeout = function() {
  return /** @type{?proto.network.PacemakerTimeout} */ (
    jspb.Message.getWrapperField(this, proto.network.PacemakerTimeout, 2));
};


/** @param {?proto.network.PacemakerTimeout|undefined} value */
proto.network.TimeoutMsg.prototype.setPacemakerTimeout = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.network.TimeoutMsg.prototype.clearPacemakerTimeout = function() {
  this.setPacemakerTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.TimeoutMsg.prototype.hasPacemakerTimeout = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.network.TimeoutMsg.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.network.TimeoutMsg.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.network.TimeoutMsg.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.TimeoutMsg.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.SyncInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.SyncInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.SyncInfo.displayName = 'proto.network.SyncInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.SyncInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.network.SyncInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.SyncInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SyncInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    highestQuorumCert: (f = msg.getHighestQuorumCert()) && proto.network.QuorumCert.toObject(includeInstance, f),
    highestLedgerInfo: (f = msg.getHighestLedgerInfo()) && proto.network.QuorumCert.toObject(includeInstance, f),
    highestTimeoutCert: (f = msg.getHighestTimeoutCert()) && proto.network.PacemakerTimeoutCertificate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.SyncInfo}
 */
proto.network.SyncInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.SyncInfo;
  return proto.network.SyncInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.SyncInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.SyncInfo}
 */
proto.network.SyncInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.network.QuorumCert;
      reader.readMessage(value,proto.network.QuorumCert.deserializeBinaryFromReader);
      msg.setHighestQuorumCert(value);
      break;
    case 2:
      var value = new proto.network.QuorumCert;
      reader.readMessage(value,proto.network.QuorumCert.deserializeBinaryFromReader);
      msg.setHighestLedgerInfo(value);
      break;
    case 3:
      var value = new proto.network.PacemakerTimeoutCertificate;
      reader.readMessage(value,proto.network.PacemakerTimeoutCertificate.deserializeBinaryFromReader);
      msg.setHighestTimeoutCert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.SyncInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.SyncInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.SyncInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.SyncInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHighestQuorumCert();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.network.QuorumCert.serializeBinaryToWriter
    );
  }
  f = message.getHighestLedgerInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.network.QuorumCert.serializeBinaryToWriter
    );
  }
  f = message.getHighestTimeoutCert();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.network.PacemakerTimeoutCertificate.serializeBinaryToWriter
    );
  }
};


/**
 * optional QuorumCert highest_quorum_cert = 1;
 * @return {?proto.network.QuorumCert}
 */
proto.network.SyncInfo.prototype.getHighestQuorumCert = function() {
  return /** @type{?proto.network.QuorumCert} */ (
    jspb.Message.getWrapperField(this, proto.network.QuorumCert, 1));
};


/** @param {?proto.network.QuorumCert|undefined} value */
proto.network.SyncInfo.prototype.setHighestQuorumCert = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.network.SyncInfo.prototype.clearHighestQuorumCert = function() {
  this.setHighestQuorumCert(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.SyncInfo.prototype.hasHighestQuorumCert = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional QuorumCert highest_ledger_info = 2;
 * @return {?proto.network.QuorumCert}
 */
proto.network.SyncInfo.prototype.getHighestLedgerInfo = function() {
  return /** @type{?proto.network.QuorumCert} */ (
    jspb.Message.getWrapperField(this, proto.network.QuorumCert, 2));
};


/** @param {?proto.network.QuorumCert|undefined} value */
proto.network.SyncInfo.prototype.setHighestLedgerInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.network.SyncInfo.prototype.clearHighestLedgerInfo = function() {
  this.setHighestLedgerInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.SyncInfo.prototype.hasHighestLedgerInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PacemakerTimeoutCertificate highest_timeout_cert = 3;
 * @return {?proto.network.PacemakerTimeoutCertificate}
 */
proto.network.SyncInfo.prototype.getHighestTimeoutCert = function() {
  return /** @type{?proto.network.PacemakerTimeoutCertificate} */ (
    jspb.Message.getWrapperField(this, proto.network.PacemakerTimeoutCertificate, 3));
};


/** @param {?proto.network.PacemakerTimeoutCertificate|undefined} value */
proto.network.SyncInfo.prototype.setHighestTimeoutCert = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.network.SyncInfo.prototype.clearHighestTimeoutCert = function() {
  this.setHighestTimeoutCert(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.SyncInfo.prototype.hasHighestTimeoutCert = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.PacemakerTimeoutCertificate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.PacemakerTimeoutCertificate.repeatedFields_, null);
};
goog.inherits(proto.network.PacemakerTimeoutCertificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.PacemakerTimeoutCertificate.displayName = 'proto.network.PacemakerTimeoutCertificate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.PacemakerTimeoutCertificate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.PacemakerTimeoutCertificate.prototype.toObject = function(opt_includeInstance) {
  return proto.network.PacemakerTimeoutCertificate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.PacemakerTimeoutCertificate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.PacemakerTimeoutCertificate.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeoutsList: jspb.Message.toObjectList(msg.getTimeoutsList(),
    proto.network.PacemakerTimeout.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.PacemakerTimeoutCertificate}
 */
proto.network.PacemakerTimeoutCertificate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.PacemakerTimeoutCertificate;
  return proto.network.PacemakerTimeoutCertificate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.PacemakerTimeoutCertificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.PacemakerTimeoutCertificate}
 */
proto.network.PacemakerTimeoutCertificate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 2:
      var value = new proto.network.PacemakerTimeout;
      reader.readMessage(value,proto.network.PacemakerTimeout.deserializeBinaryFromReader);
      msg.addTimeouts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.PacemakerTimeoutCertificate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.PacemakerTimeoutCertificate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.PacemakerTimeoutCertificate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.PacemakerTimeoutCertificate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimeoutsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.network.PacemakerTimeout.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 round = 1;
 * @return {number}
 */
proto.network.PacemakerTimeoutCertificate.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.network.PacemakerTimeoutCertificate.prototype.setRound = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated PacemakerTimeout timeouts = 2;
 * @return {!Array<!proto.network.PacemakerTimeout>}
 */
proto.network.PacemakerTimeoutCertificate.prototype.getTimeoutsList = function() {
  return /** @type{!Array<!proto.network.PacemakerTimeout>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.PacemakerTimeout, 2));
};


/** @param {!Array<!proto.network.PacemakerTimeout>} value */
proto.network.PacemakerTimeoutCertificate.prototype.setTimeoutsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.network.PacemakerTimeout=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.PacemakerTimeout}
 */
proto.network.PacemakerTimeoutCertificate.prototype.addTimeouts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.network.PacemakerTimeout, opt_index);
};


proto.network.PacemakerTimeoutCertificate.prototype.clearTimeoutsList = function() {
  this.setTimeoutsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.Block.displayName = 'proto.network.Block';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.network.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    parentId: msg.getParentId_asB64(),
    payload: msg.getPayload_asB64(),
    round: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    timestampUsecs: jspb.Message.getFieldWithDefault(msg, 6, 0),
    quorumCert: (f = msg.getQuorumCert()) && proto.network.QuorumCert.toObject(includeInstance, f),
    author: msg.getAuthor_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.Block}
 */
proto.network.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.Block;
  return proto.network.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.Block}
 */
proto.network.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestampUsecs(value);
      break;
    case 7:
      var value = new proto.network.QuorumCert;
      reader.readMessage(value,proto.network.QuorumCert.deserializeBinaryFromReader);
      msg.setQuorumCert(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthor(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getParentId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTimestampUsecs();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getQuorumCert();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.network.QuorumCert.serializeBinaryToWriter
    );
  }
  f = message.getAuthor_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.network.Block.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.network.Block.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.network.Block.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.Block.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes parent_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.network.Block.prototype.getParentId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes parent_id = 2;
 * This is a type-conversion wrapper around `getParentId()`
 * @return {string}
 */
proto.network.Block.prototype.getParentId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentId()));
};


/**
 * optional bytes parent_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentId()`
 * @return {!Uint8Array}
 */
proto.network.Block.prototype.getParentId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentId()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.Block.prototype.setParentId = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.network.Block.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.network.Block.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.network.Block.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.Block.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 round = 4;
 * @return {number}
 */
proto.network.Block.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.network.Block.prototype.setRound = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 height = 5;
 * @return {number}
 */
proto.network.Block.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.network.Block.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 timestamp_usecs = 6;
 * @return {number}
 */
proto.network.Block.prototype.getTimestampUsecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.network.Block.prototype.setTimestampUsecs = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional QuorumCert quorum_cert = 7;
 * @return {?proto.network.QuorumCert}
 */
proto.network.Block.prototype.getQuorumCert = function() {
  return /** @type{?proto.network.QuorumCert} */ (
    jspb.Message.getWrapperField(this, proto.network.QuorumCert, 7));
};


/** @param {?proto.network.QuorumCert|undefined} value */
proto.network.Block.prototype.setQuorumCert = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.network.Block.prototype.clearQuorumCert = function() {
  this.setQuorumCert(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.Block.prototype.hasQuorumCert = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes author = 8;
 * @return {!(string|Uint8Array)}
 */
proto.network.Block.prototype.getAuthor = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes author = 8;
 * This is a type-conversion wrapper around `getAuthor()`
 * @return {string}
 */
proto.network.Block.prototype.getAuthor_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthor()));
};


/**
 * optional bytes author = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthor()`
 * @return {!Uint8Array}
 */
proto.network.Block.prototype.getAuthor_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthor()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.Block.prototype.setAuthor = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes signature = 9;
 * @return {!(string|Uint8Array)}
 */
proto.network.Block.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes signature = 9;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.network.Block.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.network.Block.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.Block.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.QuorumCert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.QuorumCert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.QuorumCert.displayName = 'proto.network.QuorumCert';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.QuorumCert.prototype.toObject = function(opt_includeInstance) {
  return proto.network.QuorumCert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.QuorumCert} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.QuorumCert.toObject = function(includeInstance, msg) {
  var f, obj = {
    voteData: (f = msg.getVoteData()) && proto.network.VoteData.toObject(includeInstance, f),
    signedLedgerInfo: (f = msg.getSignedLedgerInfo()) && ledger_info_pb.LedgerInfoWithSignatures.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.QuorumCert}
 */
proto.network.QuorumCert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.QuorumCert;
  return proto.network.QuorumCert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.QuorumCert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.QuorumCert}
 */
proto.network.QuorumCert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.network.VoteData;
      reader.readMessage(value,proto.network.VoteData.deserializeBinaryFromReader);
      msg.setVoteData(value);
      break;
    case 2:
      var value = new ledger_info_pb.LedgerInfoWithSignatures;
      reader.readMessage(value,ledger_info_pb.LedgerInfoWithSignatures.deserializeBinaryFromReader);
      msg.setSignedLedgerInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.QuorumCert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.QuorumCert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.QuorumCert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.QuorumCert.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVoteData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.network.VoteData.serializeBinaryToWriter
    );
  }
  f = message.getSignedLedgerInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ledger_info_pb.LedgerInfoWithSignatures.serializeBinaryToWriter
    );
  }
};


/**
 * optional VoteData vote_data = 1;
 * @return {?proto.network.VoteData}
 */
proto.network.QuorumCert.prototype.getVoteData = function() {
  return /** @type{?proto.network.VoteData} */ (
    jspb.Message.getWrapperField(this, proto.network.VoteData, 1));
};


/** @param {?proto.network.VoteData|undefined} value */
proto.network.QuorumCert.prototype.setVoteData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.network.QuorumCert.prototype.clearVoteData = function() {
  this.setVoteData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.QuorumCert.prototype.hasVoteData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional types.LedgerInfoWithSignatures signed_ledger_info = 2;
 * @return {?proto.types.LedgerInfoWithSignatures}
 */
proto.network.QuorumCert.prototype.getSignedLedgerInfo = function() {
  return /** @type{?proto.types.LedgerInfoWithSignatures} */ (
    jspb.Message.getWrapperField(this, ledger_info_pb.LedgerInfoWithSignatures, 2));
};


/** @param {?proto.types.LedgerInfoWithSignatures|undefined} value */
proto.network.QuorumCert.prototype.setSignedLedgerInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.network.QuorumCert.prototype.clearSignedLedgerInfo = function() {
  this.setSignedLedgerInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.QuorumCert.prototype.hasSignedLedgerInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.VoteData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.VoteData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.VoteData.displayName = 'proto.network.VoteData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.VoteData.prototype.toObject = function(opt_includeInstance) {
  return proto.network.VoteData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.VoteData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.VoteData.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockId: msg.getBlockId_asB64(),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0),
    executedStateId: msg.getExecutedStateId_asB64(),
    version: jspb.Message.getFieldWithDefault(msg, 4, 0),
    parentBlockId: msg.getParentBlockId_asB64(),
    parentBlockRound: jspb.Message.getFieldWithDefault(msg, 6, 0),
    grandparentBlockId: msg.getGrandparentBlockId_asB64(),
    grandparentBlockRound: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.VoteData}
 */
proto.network.VoteData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.VoteData;
  return proto.network.VoteData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.VoteData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.VoteData}
 */
proto.network.VoteData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExecutedStateId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentBlockId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setParentBlockRound(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGrandparentBlockId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGrandparentBlockRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.VoteData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.VoteData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.VoteData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.VoteData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getExecutedStateId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getParentBlockId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getParentBlockRound();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getGrandparentBlockId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getGrandparentBlockRound();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional bytes block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.network.VoteData.prototype.getBlockId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.network.VoteData.prototype.getBlockId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockId()));
};


/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.network.VoteData.prototype.getBlockId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockId()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.VoteData.prototype.setBlockId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 round = 2;
 * @return {number}
 */
proto.network.VoteData.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.network.VoteData.prototype.setRound = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes executed_state_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.network.VoteData.prototype.getExecutedStateId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes executed_state_id = 3;
 * This is a type-conversion wrapper around `getExecutedStateId()`
 * @return {string}
 */
proto.network.VoteData.prototype.getExecutedStateId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExecutedStateId()));
};


/**
 * optional bytes executed_state_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExecutedStateId()`
 * @return {!Uint8Array}
 */
proto.network.VoteData.prototype.getExecutedStateId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExecutedStateId()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.VoteData.prototype.setExecutedStateId = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 version = 4;
 * @return {number}
 */
proto.network.VoteData.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.network.VoteData.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes parent_block_id = 5;
 * @return {!(string|Uint8Array)}
 */
proto.network.VoteData.prototype.getParentBlockId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes parent_block_id = 5;
 * This is a type-conversion wrapper around `getParentBlockId()`
 * @return {string}
 */
proto.network.VoteData.prototype.getParentBlockId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentBlockId()));
};


/**
 * optional bytes parent_block_id = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentBlockId()`
 * @return {!Uint8Array}
 */
proto.network.VoteData.prototype.getParentBlockId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentBlockId()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.VoteData.prototype.setParentBlockId = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint64 parent_block_round = 6;
 * @return {number}
 */
proto.network.VoteData.prototype.getParentBlockRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.network.VoteData.prototype.setParentBlockRound = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes grandparent_block_id = 7;
 * @return {!(string|Uint8Array)}
 */
proto.network.VoteData.prototype.getGrandparentBlockId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes grandparent_block_id = 7;
 * This is a type-conversion wrapper around `getGrandparentBlockId()`
 * @return {string}
 */
proto.network.VoteData.prototype.getGrandparentBlockId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGrandparentBlockId()));
};


/**
 * optional bytes grandparent_block_id = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGrandparentBlockId()`
 * @return {!Uint8Array}
 */
proto.network.VoteData.prototype.getGrandparentBlockId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGrandparentBlockId()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.VoteData.prototype.setGrandparentBlockId = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional uint64 grandparent_block_round = 8;
 * @return {number}
 */
proto.network.VoteData.prototype.getGrandparentBlockRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.network.VoteData.prototype.setGrandparentBlockRound = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.Vote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.Vote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.Vote.displayName = 'proto.network.Vote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.Vote.prototype.toObject = function(opt_includeInstance) {
  return proto.network.Vote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.Vote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.Vote.toObject = function(includeInstance, msg) {
  var f, obj = {
    voteData: (f = msg.getVoteData()) && proto.network.VoteData.toObject(includeInstance, f),
    author: msg.getAuthor_asB64(),
    ledgerInfo: (f = msg.getLedgerInfo()) && ledger_info_pb.LedgerInfo.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.Vote}
 */
proto.network.Vote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.Vote;
  return proto.network.Vote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.Vote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.Vote}
 */
proto.network.Vote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.network.VoteData;
      reader.readMessage(value,proto.network.VoteData.deserializeBinaryFromReader);
      msg.setVoteData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthor(value);
      break;
    case 3:
      var value = new ledger_info_pb.LedgerInfo;
      reader.readMessage(value,ledger_info_pb.LedgerInfo.deserializeBinaryFromReader);
      msg.setLedgerInfo(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.Vote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.Vote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.Vote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.Vote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVoteData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.network.VoteData.serializeBinaryToWriter
    );
  }
  f = message.getAuthor_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLedgerInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ledger_info_pb.LedgerInfo.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional VoteData vote_data = 1;
 * @return {?proto.network.VoteData}
 */
proto.network.Vote.prototype.getVoteData = function() {
  return /** @type{?proto.network.VoteData} */ (
    jspb.Message.getWrapperField(this, proto.network.VoteData, 1));
};


/** @param {?proto.network.VoteData|undefined} value */
proto.network.Vote.prototype.setVoteData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.network.Vote.prototype.clearVoteData = function() {
  this.setVoteData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.Vote.prototype.hasVoteData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes author = 2;
 * @return {!(string|Uint8Array)}
 */
proto.network.Vote.prototype.getAuthor = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes author = 2;
 * This is a type-conversion wrapper around `getAuthor()`
 * @return {string}
 */
proto.network.Vote.prototype.getAuthor_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthor()));
};


/**
 * optional bytes author = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthor()`
 * @return {!Uint8Array}
 */
proto.network.Vote.prototype.getAuthor_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthor()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.Vote.prototype.setAuthor = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional types.LedgerInfo ledger_info = 3;
 * @return {?proto.types.LedgerInfo}
 */
proto.network.Vote.prototype.getLedgerInfo = function() {
  return /** @type{?proto.types.LedgerInfo} */ (
    jspb.Message.getWrapperField(this, ledger_info_pb.LedgerInfo, 3));
};


/** @param {?proto.types.LedgerInfo|undefined} value */
proto.network.Vote.prototype.setLedgerInfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.network.Vote.prototype.clearLedgerInfo = function() {
  this.setLedgerInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.Vote.prototype.hasLedgerInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.network.Vote.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.network.Vote.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.network.Vote.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.Vote.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.RequestBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.network.RequestBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.RequestBlock.displayName = 'proto.network.RequestBlock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.RequestBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.network.RequestBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.RequestBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.RequestBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockId: msg.getBlockId_asB64(),
    numBlocks: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.RequestBlock}
 */
proto.network.RequestBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.RequestBlock;
  return proto.network.RequestBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.RequestBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.RequestBlock}
 */
proto.network.RequestBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.RequestBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.RequestBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.RequestBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.RequestBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNumBlocks();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes block_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.network.RequestBlock.prototype.getBlockId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes block_id = 1;
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {string}
 */
proto.network.RequestBlock.prototype.getBlockId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockId()));
};


/**
 * optional bytes block_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockId()`
 * @return {!Uint8Array}
 */
proto.network.RequestBlock.prototype.getBlockId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockId()));
};


/** @param {!(string|Uint8Array)} value */
proto.network.RequestBlock.prototype.setBlockId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 num_blocks = 2;
 * @return {number}
 */
proto.network.RequestBlock.prototype.getNumBlocks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.network.RequestBlock.prototype.setNumBlocks = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.RespondBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.RespondBlock.repeatedFields_, null);
};
goog.inherits(proto.network.RespondBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.network.RespondBlock.displayName = 'proto.network.RespondBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.RespondBlock.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.network.RespondBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.network.RespondBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.network.RespondBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.RespondBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.network.Block.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.RespondBlock}
 */
proto.network.RespondBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.network.RespondBlock;
  return proto.network.RespondBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.RespondBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.RespondBlock}
 */
proto.network.RespondBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.network.BlockRetrievalStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.network.Block;
      reader.readMessage(value,proto.network.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.RespondBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.network.RespondBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.RespondBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.RespondBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.network.Block.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlockRetrievalStatus status = 1;
 * @return {!proto.network.BlockRetrievalStatus}
 */
proto.network.RespondBlock.prototype.getStatus = function() {
  return /** @type {!proto.network.BlockRetrievalStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.network.BlockRetrievalStatus} value */
proto.network.RespondBlock.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated Block blocks = 2;
 * @return {!Array<!proto.network.Block>}
 */
proto.network.RespondBlock.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.network.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.Block, 2));
};


/** @param {!Array<!proto.network.Block>} value */
proto.network.RespondBlock.prototype.setBlocksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.network.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.Block}
 */
proto.network.RespondBlock.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.network.Block, opt_index);
};


proto.network.RespondBlock.prototype.clearBlocksList = function() {
  this.setBlocksList([]);
};


/**
 * @enum {number}
 */
proto.network.BlockRetrievalStatus = {
  SUCCEEDED: 0,
  ID_NOT_FOUND: 1,
  NOT_ENOUGH_BLOCKS: 2
};

goog.object.extend(exports, proto.network);
