/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var get_with_proof_pb = require('./get_with_proof_pb.js');
goog.object.extend(proto, get_with_proof_pb);
var ledger_info_pb = require('./ledger_info_pb.js');
goog.object.extend(proto, ledger_info_pb);
var transaction_pb = require('./transaction_pb.js');
goog.object.extend(proto, transaction_pb);
var account_state_blob_pb = require('./account_state_blob_pb.js');
goog.object.extend(proto, account_state_blob_pb);
var proof_pb = require('./proof_pb.js');
goog.object.extend(proto, proof_pb);
goog.exportSymbol('proto.storage.GetAccountStateWithProofByVersionRequest', null, global);
goog.exportSymbol('proto.storage.GetAccountStateWithProofByVersionResponse', null, global);
goog.exportSymbol('proto.storage.GetStartupInfoRequest', null, global);
goog.exportSymbol('proto.storage.GetStartupInfoResponse', null, global);
goog.exportSymbol('proto.storage.GetTransactionsRequest', null, global);
goog.exportSymbol('proto.storage.GetTransactionsResponse', null, global);
goog.exportSymbol('proto.storage.SaveTransactionsRequest', null, global);
goog.exportSymbol('proto.storage.SaveTransactionsResponse', null, global);
goog.exportSymbol('proto.storage.StartupInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.storage.SaveTransactionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.storage.SaveTransactionsRequest.repeatedFields_, null);
};
goog.inherits(proto.storage.SaveTransactionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.storage.SaveTransactionsRequest.displayName = 'proto.storage.SaveTransactionsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.storage.SaveTransactionsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.storage.SaveTransactionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.storage.SaveTransactionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.storage.SaveTransactionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.SaveTransactionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    txnsToCommitList: jspb.Message.toObjectList(msg.getTxnsToCommitList(),
    transaction_pb.TransactionToCommit.toObject, includeInstance),
    firstVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ledgerInfoWithSignatures: (f = msg.getLedgerInfoWithSignatures()) && ledger_info_pb.LedgerInfoWithSignatures.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.storage.SaveTransactionsRequest}
 */
proto.storage.SaveTransactionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.storage.SaveTransactionsRequest;
  return proto.storage.SaveTransactionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.storage.SaveTransactionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.storage.SaveTransactionsRequest}
 */
proto.storage.SaveTransactionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new transaction_pb.TransactionToCommit;
      reader.readMessage(value,transaction_pb.TransactionToCommit.deserializeBinaryFromReader);
      msg.addTxnsToCommit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFirstVersion(value);
      break;
    case 3:
      var value = new ledger_info_pb.LedgerInfoWithSignatures;
      reader.readMessage(value,ledger_info_pb.LedgerInfoWithSignatures.deserializeBinaryFromReader);
      msg.setLedgerInfoWithSignatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.storage.SaveTransactionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.storage.SaveTransactionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.storage.SaveTransactionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.SaveTransactionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxnsToCommitList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      transaction_pb.TransactionToCommit.serializeBinaryToWriter
    );
  }
  f = message.getFirstVersion();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getLedgerInfoWithSignatures();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ledger_info_pb.LedgerInfoWithSignatures.serializeBinaryToWriter
    );
  }
};


/**
 * repeated types.TransactionToCommit txns_to_commit = 1;
 * @return {!Array<!proto.types.TransactionToCommit>}
 */
proto.storage.SaveTransactionsRequest.prototype.getTxnsToCommitList = function() {
  return /** @type{!Array<!proto.types.TransactionToCommit>} */ (
    jspb.Message.getRepeatedWrapperField(this, transaction_pb.TransactionToCommit, 1));
};


/** @param {!Array<!proto.types.TransactionToCommit>} value */
proto.storage.SaveTransactionsRequest.prototype.setTxnsToCommitList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.TransactionToCommit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.TransactionToCommit}
 */
proto.storage.SaveTransactionsRequest.prototype.addTxnsToCommit = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.TransactionToCommit, opt_index);
};


proto.storage.SaveTransactionsRequest.prototype.clearTxnsToCommitList = function() {
  this.setTxnsToCommitList([]);
};


/**
 * optional uint64 first_version = 2;
 * @return {number}
 */
proto.storage.SaveTransactionsRequest.prototype.getFirstVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.storage.SaveTransactionsRequest.prototype.setFirstVersion = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional types.LedgerInfoWithSignatures ledger_info_with_signatures = 3;
 * @return {?proto.types.LedgerInfoWithSignatures}
 */
proto.storage.SaveTransactionsRequest.prototype.getLedgerInfoWithSignatures = function() {
  return /** @type{?proto.types.LedgerInfoWithSignatures} */ (
    jspb.Message.getWrapperField(this, ledger_info_pb.LedgerInfoWithSignatures, 3));
};


/** @param {?proto.types.LedgerInfoWithSignatures|undefined} value */
proto.storage.SaveTransactionsRequest.prototype.setLedgerInfoWithSignatures = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.storage.SaveTransactionsRequest.prototype.clearLedgerInfoWithSignatures = function() {
  this.setLedgerInfoWithSignatures(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.storage.SaveTransactionsRequest.prototype.hasLedgerInfoWithSignatures = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.storage.SaveTransactionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.storage.SaveTransactionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.storage.SaveTransactionsResponse.displayName = 'proto.storage.SaveTransactionsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.storage.SaveTransactionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.storage.SaveTransactionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.storage.SaveTransactionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.SaveTransactionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.storage.SaveTransactionsResponse}
 */
proto.storage.SaveTransactionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.storage.SaveTransactionsResponse;
  return proto.storage.SaveTransactionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.storage.SaveTransactionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.storage.SaveTransactionsResponse}
 */
proto.storage.SaveTransactionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.storage.SaveTransactionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.storage.SaveTransactionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.storage.SaveTransactionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.SaveTransactionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.storage.GetTransactionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.storage.GetTransactionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.storage.GetTransactionsRequest.displayName = 'proto.storage.GetTransactionsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.storage.GetTransactionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.storage.GetTransactionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.storage.GetTransactionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.GetTransactionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    startVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    batchSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ledgerVersion: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fetchEvents: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.storage.GetTransactionsRequest}
 */
proto.storage.GetTransactionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.storage.GetTransactionsRequest;
  return proto.storage.GetTransactionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.storage.GetTransactionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.storage.GetTransactionsRequest}
 */
proto.storage.GetTransactionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBatchSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLedgerVersion(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFetchEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.storage.GetTransactionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.storage.GetTransactionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.storage.GetTransactionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.GetTransactionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartVersion();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBatchSize();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getLedgerVersion();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFetchEvents();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint64 start_version = 1;
 * @return {number}
 */
proto.storage.GetTransactionsRequest.prototype.getStartVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.storage.GetTransactionsRequest.prototype.setStartVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 batch_size = 2;
 * @return {number}
 */
proto.storage.GetTransactionsRequest.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.storage.GetTransactionsRequest.prototype.setBatchSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 ledger_version = 3;
 * @return {number}
 */
proto.storage.GetTransactionsRequest.prototype.getLedgerVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.storage.GetTransactionsRequest.prototype.setLedgerVersion = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool fetch_events = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.storage.GetTransactionsRequest.prototype.getFetchEvents = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.storage.GetTransactionsRequest.prototype.setFetchEvents = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.storage.GetTransactionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.storage.GetTransactionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.storage.GetTransactionsResponse.displayName = 'proto.storage.GetTransactionsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.storage.GetTransactionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.storage.GetTransactionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.storage.GetTransactionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.GetTransactionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    txnListWithProof: (f = msg.getTxnListWithProof()) && transaction_pb.TransactionListWithProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.storage.GetTransactionsResponse}
 */
proto.storage.GetTransactionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.storage.GetTransactionsResponse;
  return proto.storage.GetTransactionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.storage.GetTransactionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.storage.GetTransactionsResponse}
 */
proto.storage.GetTransactionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new transaction_pb.TransactionListWithProof;
      reader.readMessage(value,transaction_pb.TransactionListWithProof.deserializeBinaryFromReader);
      msg.setTxnListWithProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.storage.GetTransactionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.storage.GetTransactionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.storage.GetTransactionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.GetTransactionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxnListWithProof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      transaction_pb.TransactionListWithProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional types.TransactionListWithProof txn_list_with_proof = 1;
 * @return {?proto.types.TransactionListWithProof}
 */
proto.storage.GetTransactionsResponse.prototype.getTxnListWithProof = function() {
  return /** @type{?proto.types.TransactionListWithProof} */ (
    jspb.Message.getWrapperField(this, transaction_pb.TransactionListWithProof, 1));
};


/** @param {?proto.types.TransactionListWithProof|undefined} value */
proto.storage.GetTransactionsResponse.prototype.setTxnListWithProof = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.storage.GetTransactionsResponse.prototype.clearTxnListWithProof = function() {
  this.setTxnListWithProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.storage.GetTransactionsResponse.prototype.hasTxnListWithProof = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.storage.GetAccountStateWithProofByVersionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.storage.GetAccountStateWithProofByVersionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.storage.GetAccountStateWithProofByVersionRequest.displayName = 'proto.storage.GetAccountStateWithProofByVersionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.storage.GetAccountStateWithProofByVersionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.storage.GetAccountStateWithProofByVersionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.storage.GetAccountStateWithProofByVersionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.GetAccountStateWithProofByVersionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.storage.GetAccountStateWithProofByVersionRequest}
 */
proto.storage.GetAccountStateWithProofByVersionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.storage.GetAccountStateWithProofByVersionRequest;
  return proto.storage.GetAccountStateWithProofByVersionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.storage.GetAccountStateWithProofByVersionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.storage.GetAccountStateWithProofByVersionRequest}
 */
proto.storage.GetAccountStateWithProofByVersionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.storage.GetAccountStateWithProofByVersionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.storage.GetAccountStateWithProofByVersionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.storage.GetAccountStateWithProofByVersionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.GetAccountStateWithProofByVersionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.storage.GetAccountStateWithProofByVersionRequest.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.storage.GetAccountStateWithProofByVersionRequest.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.storage.GetAccountStateWithProofByVersionRequest.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.storage.GetAccountStateWithProofByVersionRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 version = 2;
 * @return {number}
 */
proto.storage.GetAccountStateWithProofByVersionRequest.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.storage.GetAccountStateWithProofByVersionRequest.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.storage.GetAccountStateWithProofByVersionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.storage.GetAccountStateWithProofByVersionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.storage.GetAccountStateWithProofByVersionResponse.displayName = 'proto.storage.GetAccountStateWithProofByVersionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.storage.GetAccountStateWithProofByVersionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.storage.GetAccountStateWithProofByVersionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.storage.GetAccountStateWithProofByVersionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.GetAccountStateWithProofByVersionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountStateBlob: (f = msg.getAccountStateBlob()) && account_state_blob_pb.AccountStateBlob.toObject(includeInstance, f),
    sparseMerkleProof: (f = msg.getSparseMerkleProof()) && proof_pb.SparseMerkleProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.storage.GetAccountStateWithProofByVersionResponse}
 */
proto.storage.GetAccountStateWithProofByVersionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.storage.GetAccountStateWithProofByVersionResponse;
  return proto.storage.GetAccountStateWithProofByVersionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.storage.GetAccountStateWithProofByVersionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.storage.GetAccountStateWithProofByVersionResponse}
 */
proto.storage.GetAccountStateWithProofByVersionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new account_state_blob_pb.AccountStateBlob;
      reader.readMessage(value,account_state_blob_pb.AccountStateBlob.deserializeBinaryFromReader);
      msg.setAccountStateBlob(value);
      break;
    case 2:
      var value = new proof_pb.SparseMerkleProof;
      reader.readMessage(value,proof_pb.SparseMerkleProof.deserializeBinaryFromReader);
      msg.setSparseMerkleProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.storage.GetAccountStateWithProofByVersionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.storage.GetAccountStateWithProofByVersionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.storage.GetAccountStateWithProofByVersionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.GetAccountStateWithProofByVersionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountStateBlob();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      account_state_blob_pb.AccountStateBlob.serializeBinaryToWriter
    );
  }
  f = message.getSparseMerkleProof();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proof_pb.SparseMerkleProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional types.AccountStateBlob account_state_blob = 1;
 * @return {?proto.types.AccountStateBlob}
 */
proto.storage.GetAccountStateWithProofByVersionResponse.prototype.getAccountStateBlob = function() {
  return /** @type{?proto.types.AccountStateBlob} */ (
    jspb.Message.getWrapperField(this, account_state_blob_pb.AccountStateBlob, 1));
};


/** @param {?proto.types.AccountStateBlob|undefined} value */
proto.storage.GetAccountStateWithProofByVersionResponse.prototype.setAccountStateBlob = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.storage.GetAccountStateWithProofByVersionResponse.prototype.clearAccountStateBlob = function() {
  this.setAccountStateBlob(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.storage.GetAccountStateWithProofByVersionResponse.prototype.hasAccountStateBlob = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional types.SparseMerkleProof sparse_merkle_proof = 2;
 * @return {?proto.types.SparseMerkleProof}
 */
proto.storage.GetAccountStateWithProofByVersionResponse.prototype.getSparseMerkleProof = function() {
  return /** @type{?proto.types.SparseMerkleProof} */ (
    jspb.Message.getWrapperField(this, proof_pb.SparseMerkleProof, 2));
};


/** @param {?proto.types.SparseMerkleProof|undefined} value */
proto.storage.GetAccountStateWithProofByVersionResponse.prototype.setSparseMerkleProof = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.storage.GetAccountStateWithProofByVersionResponse.prototype.clearSparseMerkleProof = function() {
  this.setSparseMerkleProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.storage.GetAccountStateWithProofByVersionResponse.prototype.hasSparseMerkleProof = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.storage.GetStartupInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.storage.GetStartupInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.storage.GetStartupInfoRequest.displayName = 'proto.storage.GetStartupInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.storage.GetStartupInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.storage.GetStartupInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.storage.GetStartupInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.GetStartupInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.storage.GetStartupInfoRequest}
 */
proto.storage.GetStartupInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.storage.GetStartupInfoRequest;
  return proto.storage.GetStartupInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.storage.GetStartupInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.storage.GetStartupInfoRequest}
 */
proto.storage.GetStartupInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.storage.GetStartupInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.storage.GetStartupInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.storage.GetStartupInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.GetStartupInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.storage.GetStartupInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.storage.GetStartupInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.storage.GetStartupInfoResponse.displayName = 'proto.storage.GetStartupInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.storage.GetStartupInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.storage.GetStartupInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.storage.GetStartupInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.GetStartupInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.storage.StartupInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.storage.GetStartupInfoResponse}
 */
proto.storage.GetStartupInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.storage.GetStartupInfoResponse;
  return proto.storage.GetStartupInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.storage.GetStartupInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.storage.GetStartupInfoResponse}
 */
proto.storage.GetStartupInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.storage.StartupInfo;
      reader.readMessage(value,proto.storage.StartupInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.storage.GetStartupInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.storage.GetStartupInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.storage.GetStartupInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.GetStartupInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.storage.StartupInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional StartupInfo info = 1;
 * @return {?proto.storage.StartupInfo}
 */
proto.storage.GetStartupInfoResponse.prototype.getInfo = function() {
  return /** @type{?proto.storage.StartupInfo} */ (
    jspb.Message.getWrapperField(this, proto.storage.StartupInfo, 1));
};


/** @param {?proto.storage.StartupInfo|undefined} value */
proto.storage.GetStartupInfoResponse.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.storage.GetStartupInfoResponse.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.storage.GetStartupInfoResponse.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.storage.StartupInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.storage.StartupInfo.repeatedFields_, null);
};
goog.inherits(proto.storage.StartupInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.storage.StartupInfo.displayName = 'proto.storage.StartupInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.storage.StartupInfo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.storage.StartupInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.storage.StartupInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.storage.StartupInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.StartupInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerInfo: (f = msg.getLedgerInfo()) && ledger_info_pb.LedgerInfo.toObject(includeInstance, f),
    latestVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    accountStateRootHash: msg.getAccountStateRootHash_asB64(),
    ledgerFrozenSubtreeHashesList: msg.getLedgerFrozenSubtreeHashesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.storage.StartupInfo}
 */
proto.storage.StartupInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.storage.StartupInfo;
  return proto.storage.StartupInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.storage.StartupInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.storage.StartupInfo}
 */
proto.storage.StartupInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ledger_info_pb.LedgerInfo;
      reader.readMessage(value,ledger_info_pb.LedgerInfo.deserializeBinaryFromReader);
      msg.setLedgerInfo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatestVersion(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountStateRootHash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addLedgerFrozenSubtreeHashes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.storage.StartupInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.storage.StartupInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.storage.StartupInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.storage.StartupInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      ledger_info_pb.LedgerInfo.serializeBinaryToWriter
    );
  }
  f = message.getLatestVersion();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAccountStateRootHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getLedgerFrozenSubtreeHashesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
};


/**
 * optional types.LedgerInfo ledger_info = 1;
 * @return {?proto.types.LedgerInfo}
 */
proto.storage.StartupInfo.prototype.getLedgerInfo = function() {
  return /** @type{?proto.types.LedgerInfo} */ (
    jspb.Message.getWrapperField(this, ledger_info_pb.LedgerInfo, 1));
};


/** @param {?proto.types.LedgerInfo|undefined} value */
proto.storage.StartupInfo.prototype.setLedgerInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.storage.StartupInfo.prototype.clearLedgerInfo = function() {
  this.setLedgerInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.storage.StartupInfo.prototype.hasLedgerInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 latest_version = 2;
 * @return {number}
 */
proto.storage.StartupInfo.prototype.getLatestVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.storage.StartupInfo.prototype.setLatestVersion = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes account_state_root_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.storage.StartupInfo.prototype.getAccountStateRootHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes account_state_root_hash = 3;
 * This is a type-conversion wrapper around `getAccountStateRootHash()`
 * @return {string}
 */
proto.storage.StartupInfo.prototype.getAccountStateRootHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountStateRootHash()));
};


/**
 * optional bytes account_state_root_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountStateRootHash()`
 * @return {!Uint8Array}
 */
proto.storage.StartupInfo.prototype.getAccountStateRootHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountStateRootHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.storage.StartupInfo.prototype.setAccountStateRootHash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated bytes ledger_frozen_subtree_hashes = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.storage.StartupInfo.prototype.getLedgerFrozenSubtreeHashesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes ledger_frozen_subtree_hashes = 4;
 * This is a type-conversion wrapper around `getLedgerFrozenSubtreeHashesList()`
 * @return {!Array<string>}
 */
proto.storage.StartupInfo.prototype.getLedgerFrozenSubtreeHashesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getLedgerFrozenSubtreeHashesList()));
};


/**
 * repeated bytes ledger_frozen_subtree_hashes = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLedgerFrozenSubtreeHashesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.storage.StartupInfo.prototype.getLedgerFrozenSubtreeHashesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getLedgerFrozenSubtreeHashesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.storage.StartupInfo.prototype.setLedgerFrozenSubtreeHashesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.storage.StartupInfo.prototype.addLedgerFrozenSubtreeHashes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.storage.StartupInfo.prototype.clearLedgerFrozenSubtreeHashesList = function() {
  this.setLedgerFrozenSubtreeHashesList([]);
};


goog.object.extend(exports, proto.storage);
